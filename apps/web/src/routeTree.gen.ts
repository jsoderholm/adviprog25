/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as AuthenticatedRouteImport } from './routes/_authenticated'
import { Route as AuthenticatedIndexRouteImport } from './routes/_authenticated/index'
import { Route as AuthenticatedSearchresultsRouteRouteImport } from './routes/_authenticated/searchresults/route'
import { Route as AuthenticatedLandingpageRouteRouteImport } from './routes/_authenticated/landingpage/route'
import { Route as authSignupRouteRouteImport } from './routes/(auth)/signup/route'
import { Route as authLoginRouteRouteImport } from './routes/(auth)/login/route'

const AuthenticatedRoute = AuthenticatedRouteImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() =>
  import('./routes/_authenticated.lazy').then((d) => d.Route),
)
const AuthenticatedIndexRoute = AuthenticatedIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedSearchresultsRouteRoute =
  AuthenticatedSearchresultsRouteRouteImport.update({
    id: '/searchresults',
    path: '/searchresults',
    getParentRoute: () => AuthenticatedRoute,
  } as any)
const AuthenticatedLandingpageRouteRoute =
  AuthenticatedLandingpageRouteRouteImport.update({
    id: '/landingpage',
    path: '/landingpage',
    getParentRoute: () => AuthenticatedRoute,
  } as any)
const authSignupRouteRoute = authSignupRouteRouteImport.update({
  id: '/(auth)/signup',
  path: '/signup',
  getParentRoute: () => rootRouteImport,
} as any)
const authLoginRouteRoute = authLoginRouteRouteImport.update({
  id: '/(auth)/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/login': typeof authLoginRouteRoute
  '/signup': typeof authSignupRouteRoute
  '/landingpage': typeof AuthenticatedLandingpageRouteRoute
  '/searchresults': typeof AuthenticatedSearchresultsRouteRoute
  '/': typeof AuthenticatedIndexRoute
}
export interface FileRoutesByTo {
  '/login': typeof authLoginRouteRoute
  '/signup': typeof authSignupRouteRoute
  '/landingpage': typeof AuthenticatedLandingpageRouteRoute
  '/searchresults': typeof AuthenticatedSearchresultsRouteRoute
  '/': typeof AuthenticatedIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_authenticated': typeof AuthenticatedRouteWithChildren
  '/(auth)/login': typeof authLoginRouteRoute
  '/(auth)/signup': typeof authSignupRouteRoute
  '/_authenticated/landingpage': typeof AuthenticatedLandingpageRouteRoute
  '/_authenticated/searchresults': typeof AuthenticatedSearchresultsRouteRoute
  '/_authenticated/': typeof AuthenticatedIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/login' | '/signup' | '/landingpage' | '/searchresults' | '/'
  fileRoutesByTo: FileRoutesByTo
  to: '/login' | '/signup' | '/landingpage' | '/searchresults' | '/'
  id:
    | '__root__'
    | '/_authenticated'
    | '/(auth)/login'
    | '/(auth)/signup'
    | '/_authenticated/landingpage'
    | '/_authenticated/searchresults'
    | '/_authenticated/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AuthenticatedRoute: typeof AuthenticatedRouteWithChildren
  authLoginRouteRoute: typeof authLoginRouteRoute
  authSignupRouteRoute: typeof authSignupRouteRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated/': {
      id: '/_authenticated/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AuthenticatedIndexRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/searchresults': {
      id: '/_authenticated/searchresults'
      path: '/searchresults'
      fullPath: '/searchresults'
      preLoaderRoute: typeof AuthenticatedSearchresultsRouteRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/landingpage': {
      id: '/_authenticated/landingpage'
      path: '/landingpage'
      fullPath: '/landingpage'
      preLoaderRoute: typeof AuthenticatedLandingpageRouteRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/(auth)/signup': {
      id: '/(auth)/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof authSignupRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)/login': {
      id: '/(auth)/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authLoginRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

interface AuthenticatedRouteChildren {
  AuthenticatedLandingpageRouteRoute: typeof AuthenticatedLandingpageRouteRoute
  AuthenticatedSearchresultsRouteRoute: typeof AuthenticatedSearchresultsRouteRoute
  AuthenticatedIndexRoute: typeof AuthenticatedIndexRoute
}

const AuthenticatedRouteChildren: AuthenticatedRouteChildren = {
  AuthenticatedLandingpageRouteRoute: AuthenticatedLandingpageRouteRoute,
  AuthenticatedSearchresultsRouteRoute: AuthenticatedSearchresultsRouteRoute,
  AuthenticatedIndexRoute: AuthenticatedIndexRoute,
}

const AuthenticatedRouteWithChildren = AuthenticatedRoute._addFileChildren(
  AuthenticatedRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  AuthenticatedRoute: AuthenticatedRouteWithChildren,
  authLoginRouteRoute: authLoginRouteRoute,
  authSignupRouteRoute: authSignupRouteRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
